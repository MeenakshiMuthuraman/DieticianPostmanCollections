{
	"info": {
		"_postman_id": "172650a0-3952-43e4-8be6-3e805acc0701",
		"name": "Team3_PostmanDiet_Version1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37330605",
		"_collection_link": "https://team3-postmandiet.postman.co/workspace/Team-Workspace~773868da-1b23-4be9-898d-8b8747cc47f4/collection/30919832-172650a0-3952-43e4-8be6-3e805acc0701?action=share&source=collection_link&creator=37330605"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "AdminLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responsebody = pm.response.json();",
									"const Token = responsebody.token;",
									"pm.environment.set(\"Token\",Token);",
									"",
									"//Content Type validation",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"password\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"format\" : \"email\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"password\",",
									"    \"userLoginEmail\"",
									"  ]",
									"}",
									"",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"",
									"const validate = ajv.compile(schema);",
									"const valid = validate(requestBody);",
									"",
									"pm.test(\"Request body schema is valid\", function () {",
									"    pm.expect(valid).to.be.true;",
									"    if (!valid) {",
									"        console.log(validate.errors);",
									"    }",
									"});",
									"",
									"//Test for a response header having a particular value:",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var password = pm.environment.get(\"password\");",
									"var userLoginEmail = pm.environment.get(\"userLoginEmail\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{login-Endpoint}}",
							"host": [
								"{{BaseURL}}{{login-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "AdminLogin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"test\",\n  \"userLoginEmail\": \"Team3@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401329&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s6tiNxLTlYSfm4BTdhEToPNYoiTd3CMPygTuR3H4oYw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401329&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s6tiNxLTlYSfm4BTdhEToPNYoiTd3CMPygTuR3H4oYw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:48:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtM0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0MDEzMzAsImV4cCI6MTcyMjQzMDEzMH0.6N8cGLCQYysqdrbWtAosVrjdIlO0ALr-f7sE7FmWGsgo-bZ_6XK2FgT_VhKh8PucZmUMe5w4Lb2Pkh2105jj1g\",\n    \"type\": \"Bearer \",\n    \"userId\": 7045,\n    \"loginUserEmail\": \"Team3@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\"\n    ]\n}"
						}
					]
				},
				{
					"name": "CreateDietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//pm.collectionVariables.unset(\"DieticianID_EndtoEnd\");",
									"",
									"let dieticianID_List = pm.collectionVariables.get(\"dieticianID_List\") || [];",
									"",
									"var dieticianID = jsonData.id;",
									"console.log(\"dieticianID: \", dieticianID)",
									"pm.collectionVariables.set(\"dieticianID\", dieticianID)",
									"if (!pm.collectionVariables.get(\"DieticianID_EndtoEnd\")) {",
									"    pm.collectionVariables.set(\"DieticianID_EndtoEnd\", dieticianID);",
									"} else {",
									"    pm.collectionVariables.set(\"dieticianID\", dieticianID);",
									"    pm.collectionVariables.set(\"dieticianEmail\", jsonData.Email);",
									"    pm.collectionVariables.set(\"dieticianPassword\", jsonData.password);",
									"}",
									"",
									"",
									"if (pm.response.code === 201) {",
									"    dieticianID_List.push(dieticianID);",
									"    pm.collectionVariables.set(\"dieticianID_List\", dieticianID_List);",
									"    console.log(\"Updated dieticianID_List:\", dieticianID_List);",
									"}",
									"pm.test(\"Response status code matches expected status code\", function () {",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"    console.log(pm.response.code);",
									"    console.log(pm.variables.get(\"statusCode\"));",
									"});",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv;",
									"",
									"const schema = {",
									"",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"ContactNumber\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"DateOfBirth\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date\"",
									"        },",
									"        \"Education\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"Email\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"email\"",
									"        },",
									"        \"Firstname\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"HospitalCity\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"HospitalName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"HospitalPincode\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"HospitalStreet\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"Lastname\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"ContactNumber\",",
									"        \"DateOfBirth\",",
									"        \"Education\",",
									"        \"Email\",",
									"        \"Firstname\",",
									"        \"HospitalCity\",",
									"        \"HospitalName\",",
									"        \"HospitalPincode\",",
									"        \"HospitalStreet\",",
									"        \"Lastname\"",
									"    ]",
									"}",
									"",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"const validate = ajv.compile(schema);",
									"const valid = validate(requestBody);",
									"",
									"pm.test(\"Request body schema is valid\", function () {",
									"    pm.expect(valid).to.be.true;",
									"    if (!valid) {",
									"        console.log(validate.errors);",
									"    }",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Authorization header is present\", function () {",
									"    var authHeader = pm.request.headers.get('Authorization');",
									"    pm.expect(authHeader).to.not.be.undefined;",
									"    pm.expect(authHeader).to.not.be.null;",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);",
									"    console.log(\"Authorization header value:\", authHeader);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "CreateDietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6780001111\",\n  \"DateOfBirth\": \"1962-07-26T18:14:08.570Z\",\n  \"Education\": \"MBA\",\n  \"Email\": \"testuser1@gmail.com\",\n  \"Firstname\": \"Myfirstuser\",\n  \"HospitalCity\": \"Newyork\",\n  \"HospitalName\": \"Wellstar\",\n  \"HospitalPincode\": \"300091\",\n  \"HospitalStreet\": \"canton\",\n  \"Lastname\": \"trial\"\n \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401427&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=dfEcyfAovfc%2BOOC4fclUUlf20nxfpbq0e7NivkrmkTw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401427&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=dfEcyfAovfc%2BOOC4fclUUlf20nxfpbq0e7NivkrmkTw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/166"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:50:27 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 166,\n    \"loginPassword\": \"Culture22\",\n    \"Firstname\": \"Myfirstuser\",\n    \"Lastname\": \"trial\",\n    \"ContactNumber\": \"6780001111\",\n    \"DateOfBirth\": \"1962-07-26T18:14:08.570+00:00\",\n    \"Email\": \"testuser1@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"canton\",\n    \"HospitalCity\": \"Newyork\",\n    \"HospitalPincode\": \"300091\",\n    \"Education\": \"MBA\"\n}"
						},
						{
							"name": "CreateDietician_Dietician2Details",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6550001112\",\n  \"DateOfBirth\": \"1976-01-16T18:14:08.570Z\",\n  \"Education\": \"BE\",\n  \"Email\": \"PMDDietician2@gmail.com\",\n  \"Firstname\": \"PMDDieticiantwo\",\n  \"HospitalCity\": \"Newada\",\n  \"HospitalName\": \"Wellstar\",\n  \"HospitalPincode\": \"640002\",\n  \"HospitalStreet\": \"shiloh\",\n  \"Lastname\": \"teamthree\"\n \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
									"host": [
										"{{BaseURL}}{{Dietician-Endpoint}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722478354&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=9UfWa%2Fp8tSIPWPUfdoGhz3usXc%2BINwRX3IX4RtditN4%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722478354&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=9UfWa%2Fp8tSIPWPUfdoGhz3usXc%2BINwRX3IX4RtditN4%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/270"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 02:12:35 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 270,\n    \"loginPassword\": \"Great31\",\n    \"Firstname\": \"PMDDieticiantwo\",\n    \"Lastname\": \"teamthree\",\n    \"ContactNumber\": \"6550001112\",\n    \"DateOfBirth\": \"1976-01-16T18:14:08.570+00:00\",\n    \"Email\": \"PMDDietician2@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"shiloh\",\n    \"HospitalCity\": \"Newada\",\n    \"HospitalPincode\": \"640002\",\n    \"Education\": \"BE\"\n}"
						},
						{
							"name": "CreateDietician_3",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"6550001113\",\n  \"DateOfBirth\": \"1945-10-26T18:14:08.570Z\",\n  \"Education\": \"BE\",\n  \"Email\": \"PMDDietician3@gmail.com\",\n  \"Firstname\": \"PMDDieticianthree\",\n  \"HospitalCity\": \"Newada\",\n  \"HospitalName\": \"Wellstar\",\n  \"HospitalPincode\": \"640002\",\n  \"HospitalStreet\": \"shiloh\",\n  \"Lastname\": \"teamthree\"\n \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
									"host": [
										"{{BaseURL}}{{Dietician-Endpoint}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722484089&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=wCePQ%2FUfuyMAVSos4Iadq3KhgUHwdAnk59LSRCv6k5A%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722484089&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=wCePQ%2FUfuyMAVSos4Iadq3KhgUHwdAnk59LSRCv6k5A%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/297"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 03:48:09 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 297,\n    \"loginPassword\": \"Good21\",\n    \"Firstname\": \"PMDDieticianthree\",\n    \"Lastname\": \"teamthree\",\n    \"ContactNumber\": \"6550001113\",\n    \"DateOfBirth\": \"1945-10-26T18:14:08.570+00:00\",\n    \"Email\": \"PMDDietician3@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"shiloh\",\n    \"HospitalCity\": \"Newada\",\n    \"HospitalPincode\": \"640002\",\n    \"Education\": \"BE\"\n}"
						},
						{
							"name": "CreateDietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"ContactNumber\": \"4440001111\",\n   \"DateOfBirth\": \"1944-14-04\",\n   \"Education\": \"MBBS\",\n    \"Email\": \"PostDietician4@gmail.com\",\n   \"Firstname\": \"PMDfour\",\n   \"HospitalCity\": \"NewYork\",\n    \"HospitalName\": \"WellStar\",\n    \"HospitalPincode\": \"300024\",\n     \"HospitalStreet\": \"Arcade\",\n     \"Lastname\": \"teamthree\"\n }\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
									"host": [
										"{{BaseURL}}{{Dietician-Endpoint}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722652461&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=99ME7ferM8le2VG%2BOAja7TUdPCufgBrxn1zMhiYhaT8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722652461&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=99ME7ferM8le2VG%2BOAja7TUdPCufgBrxn1zMhiYhaT8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/863"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 02:34:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 863,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"PMDfour\",\n    \"Lastname\": \"teamthree\",\n    \"ContactNumber\": \"4440001111\",\n    \"DateOfBirth\": \"1945-02-04T00:00:00.000+00:00\",\n    \"Email\": \"PostDietician4@gmail.com\",\n    \"HospitalName\": \"WellStar\",\n    \"HospitalStreet\": \"Arcade\",\n    \"HospitalCity\": \"NewYork\",\n    \"HospitalPincode\": \"300024\",\n    \"Education\": \"MBBS\"\n}"
						},
						{
							"name": "CreateDietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ContactNumber\": \"7550001112\",\n  \"DateOfBirth\": \"1996-01-16T18:14:08.570Z\",\n  \"Education\": \"BE\",\n  \"Email\": \"PMDDieticianthree@gmail.com\",\n  \"Firstname\": \"PMDDieticianthree\",\n  \"HospitalCity\": \"Newada\",\n  \"HospitalName\": \"Wellstar\",\n  \"HospitalPincode\": \"640002\",\n  \"HospitalStreet\": \"shiloh\",\n  \"Lastname\": \"teamthree\"\n \n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
									"host": [
										"{{BaseURL}}{{Dietician-Endpoint}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722548920&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sLpajWF8R4R0RTWi%2F2jDSD5OkT34wabJOtkaNrnpQSw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722548920&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sLpajWF8R4R0RTWi%2F2jDSD5OkT34wabJOtkaNrnpQSw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/435"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 21:48:40 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 435,\n    \"loginPassword\": \"Mango66\",\n    \"Firstname\": \"PMDDieticianthree\",\n    \"Lastname\": \"teamthree\",\n    \"ContactNumber\": \"7550001112\",\n    \"DateOfBirth\": \"1996-01-16T18:14:08.570+00:00\",\n    \"Email\": \"PMDDieticianthree@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"shiloh\",\n    \"HospitalCity\": \"Newada\",\n    \"HospitalPincode\": \"640002\",\n    \"Education\": \"BE\"\n}"
						}
					]
				},
				{
					"name": "UpdateDieticianInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"    console.log(pm.response.code);\r",
									"    console.log(pm.variables.get(\"statusCode\"));\r",
									"\r",
									"}) \r",
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv;\r",
									"\r",
									"const schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\" : \"date\"\r",
									"    },\r",
									"    \"Education\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\" : \"email\"\r",
									"    },\r",
									"    \"Firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalCity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalPincode\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalStreet\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"ContactNumber\",\r",
									"    \"DateOfBirth\",\r",
									"    \"Education\",\r",
									"    \"Email\",\r",
									"    \"Firstname\",\r",
									"    \"HospitalCity\",\r",
									"    \"HospitalName\",\r",
									"    \"HospitalPincode\",\r",
									"    \"HospitalStreet\",\r",
									"    \"Lastname\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw)\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(requestBody);\r",
									"\r",
									"pm.test(\"Request body schema is valid\", function () {\r",
									"    pm.expect(valid).to.be.true;\r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									"\r",
									"\r",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response status code matches expected status code\", function(){",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"    console.log(pm.response.code);",
									"    console.log(pm.variables.get(\"statusCode\"));",
									"",
									"}) "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Education\": \"{{Education}}\",\n  \"Email\": \"{{Email}}\",\n  \"Firstname\": \"{{Firstname}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"Lastname\": \"{{Lastname}}\"\n \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}/:dieticianId",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							],
							"path": [
								":dieticianId"
							],
							"variable": [
								{
									"key": "dieticianId",
									"value": "{{DieticianID_EndtoEnd}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "UpdateDieticianInfo",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"ContactNumber\": \"6780001111\", \n\"DateOfBirth\": \"1962-07-26T18:14:08.570Z\", \n\"Education\": \"MCA\", \n\"Email\": \"testuser1@gmail.com\", \n\"Firstname\": \"Myfirstuser\", \n\"HospitalCity\": \"Newyork\", \n\"HospitalName\": \"Wellstar\", \n\"HospitalPincode\": \"300091\", \n\"HospitalStreet\": \"canton\", \n\"Lastname\": \"trial\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/:dieticianId",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician",
										":dieticianId"
									],
									"variable": [
										{
											"key": "dieticianId",
											"value": "158"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722397953&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pcK0DXYNvAKepC3hLFzdIaUcCWHTk6s4vIZT%2B63PUYY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722397953&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pcK0DXYNvAKepC3hLFzdIaUcCWHTk6s4vIZT%2B63PUYY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 03:52:33 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 158,\n    \"Firstname\": \"Myfirstuser\",\n    \"Lastname\": \"trial\",\n    \"ContactNumber\": \"6780001111\",\n    \"DateOfBirth\": \"1962-07-26T18:14:08.570+00:00\",\n    \"Email\": \"testuser1@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"canton\",\n    \"HospitalCity\": \"Newyork\",\n    \"HospitalPincode\": \"300091\",\n    \"Education\": \"MCA\"\n}"
						}
					]
				},
				{
					"name": "GetAllDieticianInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"    console.log(pm.response.code);\r",
									"    console.log(pm.variables.get(\"statusCode\"));\r",
									"\r",
									"}) \r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "GetAllDieticianInfo",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401383&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=z%2F7TALuW1k5CZaIfcSnultE8%2F89rX9ExTFZb%2F8eepHU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401383&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=z%2F7TALuW1k5CZaIfcSnultE8%2F89rX9ExTFZb%2F8eepHU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:49:43 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"Firstname\": \"Revathi\",\n        \"Lastname\": \"K\",\n        \"ContactNumber\": \"1210172892\",\n        \"DateOfBirth\": \"1985-06-21T00:00:00.000+00:00\",\n        \"Email\": \"Revathi@gmail.com\"\n    },\n    {\n        \"id\": 128,\n        \"HospitalName\": \"45th\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"New York\",\n        \"HospitalPincode\": \"432954\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 129,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 130,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 131,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 132,\n        \"HospitalName\": \"Max Hospital\",\n        \"HospitalStreet\": \"Eden Road\",\n        \"HospitalCity\": \"Noida\",\n        \"HospitalPincode\": \"200181\",\n        \"Education\": \"MSC\"\n    },\n    {\n        \"id\": 134,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 135,\n        \"HospitalName\": \"Max Hospital\",\n        \"HospitalStreet\": \"Eden Road\",\n        \"HospitalCity\": \"Noida\",\n        \"HospitalPincode\": \"200181\",\n        \"Education\": \"MSC\"\n    },\n    {\n        \"id\": 136,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 138,\n        \"Firstname\": \"Smith\",\n        \"Lastname\": \"D\",\n        \"ContactNumber\": \"3456443456\",\n        \"DateOfBirth\": \"1982-10-12T00:00:00.000+00:00\",\n        \"Email\": \"Smith@gmail.com\",\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"new york\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 143,\n        \"Firstname\": \"Akshata\",\n        \"Lastname\": \"Dev\",\n        \"ContactNumber\": \"8964766778\",\n        \"DateOfBirth\": \"1996-08-20T00:00:00.000+00:00\",\n        \"Email\": \"akshatao8@gmail.com\",\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 144,\n        \"Firstname\": \"test\",\n        \"Lastname\": \"test\",\n        \"ContactNumber\": \"1234567891\",\n        \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n        \"Email\": \"test@gmail.com\",\n        \"HospitalName\": \"xyz\",\n        \"HospitalStreet\": \"xyz\",\n        \"HospitalCity\": \"Navi Mumbai\",\n        \"HospitalPincode\": \"435673\",\n        \"Education\": \"test\"\n    },\n    {\n        \"id\": 145,\n        \"Firstname\": \"Ram\",\n        \"Lastname\": \"Lal\",\n        \"ContactNumber\": \"9274620184\",\n        \"DateOfBirth\": \"2022-09-10T00:00:00.000+00:00\",\n        \"Email\": \"dietician1test1a@gmail.com\",\n        \"HospitalName\": \"Lalwani\",\n        \"HospitalStreet\": \"Ram Gali\",\n        \"HospitalCity\": \"Delhi\",\n        \"HospitalPincode\": \"177000\",\n        \"Education\": \"MBBS\"\n    },\n    {\n        \"id\": 147,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 148,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 149,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"new york\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 150,\n        \"Firstname\": \"Pragyan\",\n        \"Lastname\": \"M\",\n        \"ContactNumber\": \"7773263456\",\n        \"DateOfBirth\": \"1977-11-12T00:00:00.000+00:00\",\n        \"Email\": \"pragym@gmail.com\",\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"new york\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 151,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 152,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 153,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"new york\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 154,\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 155,\n        \"Firstname\": \"Suamthi\",\n        \"Lastname\": \"S\",\n        \"ContactNumber\": \"8823266676\",\n        \"DateOfBirth\": \"1960-08-23T00:00:00.000+00:00\",\n        \"Email\": \"Sumathi.admin@gmail.com\",\n        \"HospitalName\": \"hospital\",\n        \"HospitalStreet\": \"street\",\n        \"HospitalCity\": \"San Jose\",\n        \"HospitalPincode\": \"432394\",\n        \"Education\": \"MS\"\n    },\n    {\n        \"id\": 157,\n        \"Firstname\": \"John\",\n        \"Lastname\": \"Martin\",\n        \"ContactNumber\": \"7607306874\",\n        \"DateOfBirth\": \"1973-07-26T18:14:08.570+00:00\",\n        \"Email\": \"John@gmail.com\",\n        \"HospitalName\": \"saintfrancis\",\n        \"HospitalStreet\": \"Pinstreet\",\n        \"HospitalCity\": \"Hartford\",\n        \"HospitalPincode\": \"068795\",\n        \"Education\": \"Bpharm\"\n    },\n    {\n        \"id\": 159,\n        \"Firstname\": \"Postman\",\n        \"Lastname\": \"Don\",\n        \"ContactNumber\": \"4085048668\",\n        \"DateOfBirth\": \"2024-03-26T18:15:08.570+00:00\",\n        \"Email\": \"postmatdiet2@gmail.com\",\n        \"HospitalName\": \"St.Joseph\",\n        \"HospitalStreet\": \"36thStreet\",\n        \"HospitalCity\": \"Austin\",\n        \"HospitalPincode\": \"600901\",\n        \"Education\": \"b.tech\"\n    },\n    {\n        \"id\": 161,\n        \"Firstname\": \"sweety\",\n        \"Lastname\": \"pie\",\n        \"ContactNumber\": \"4279882234\",\n        \"DateOfBirth\": \"2000-07-26T00:00:00.000+00:00\",\n        \"Email\": \"eee1234@gmail.com\",\n        \"HospitalName\": \"appolo\",\n        \"HospitalStreet\": \"apple\",\n        \"HospitalCity\": \"chennai\",\n        \"HospitalPincode\": \"642002\",\n        \"Education\": \"EEE\"\n    },\n    {\n        \"id\": 163,\n        \"Firstname\": \"July\",\n        \"Lastname\": \"scott\",\n        \"ContactNumber\": \"9279882234\",\n        \"DateOfBirth\": \"1990-09-26T00:00:00.000+00:00\",\n        \"Email\": \"ece12@gmail.com\",\n        \"HospitalName\": \"Mainline\",\n        \"HospitalStreet\": \"anna\",\n        \"HospitalCity\": \"Mumbai\",\n        \"HospitalPincode\": \"642110\",\n        \"Education\": \"ECE\"\n    },\n    {\n        \"id\": 164,\n        \"Firstname\": \"teamnine\",\n        \"Lastname\": \"Dietician\",\n        \"ContactNumber\": \"7037037037\",\n        \"DateOfBirth\": \"1977-07-26T18:14:08.570+00:00\",\n        \"Email\": \"teamnine.ditecian@gmail.com\",\n        \"HospitalName\": \"Pediatrics\",\n        \"HospitalStreet\": \"Reston Dr\",\n        \"HospitalCity\": \"Reston\",\n        \"HospitalPincode\": \"201711\",\n        \"Education\": \"MSTERS\"\n    },\n    {\n        \"id\": 165,\n        \"Firstname\": \"Api\",\n        \"Lastname\": \"s\",\n        \"ContactNumber\": \"1234567891\",\n        \"DateOfBirth\": \"2024-07-31T04:41:43.537+00:00\",\n        \"Email\": \"Api_Dite@gmail.com\",\n        \"HospitalName\": \"DietHos\",\n        \"HospitalStreet\": \"12API\",\n        \"HospitalCity\": \"CA\",\n        \"HospitalPincode\": \"223422\",\n        \"Education\": \"Mphil\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetDieticianById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"}) \r",
									"\r",
									"//const requestBody = JSON.parse(pm.request.body.raw)\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}/:dieticianId",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							],
							"path": [
								":dieticianId"
							],
							"variable": [
								{
									"key": "dieticianId",
									"value": "{{DieticianID_EndtoEnd}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "GetDieticianById",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/:dieticianId",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician",
										":dieticianId"
									],
									"variable": [
										{
											"key": "dieticianId",
											"value": "166"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722402203&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=nnnOIbcIiW5w5LvqNWSzHf7vcuFhFQ%2BjzF0G551Jhl4%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722402203&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=nnnOIbcIiW5w5LvqNWSzHf7vcuFhFQ%2BjzF0G551Jhl4%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 05:03:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 166,\n    \"Firstname\": \"Myfirstuser\",\n    \"Lastname\": \"trial\",\n    \"ContactNumber\": \"6780001111\",\n    \"DateOfBirth\": \"1962-07-26T18:14:08.570+00:00\",\n    \"Email\": \"testuser1@gmail.com\",\n    \"HospitalName\": \"Wellstar\",\n    \"HospitalStreet\": \"canton\",\n    \"HospitalCity\": \"Newyork\",\n    \"HospitalPincode\": \"300091\",\n    \"Education\": \"MBA\"\n}"
						}
					]
				},
				{
					"name": "MorbitdityTestname_Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"    console.log(pm.response.code);\r",
									"    console.log(pm.variables.get(\"statusCode\"));\r",
									"\r",
									"})\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//const requestBody = JSON.parse(pm.request.body.raw)\r",
									"let morbidityTestNames = pm.collectionVariables.get(\"morbidityTestNames\");\r",
									"let morbidityIndex = pm.collectionVariables.get(\"morbidityIndex\");\r",
									"\r",
									"if (typeof morbidityTestNames === 'string') {\r",
									"    morbidityTestNames = JSON.parse(morbidityTestNames);\r",
									"}\r",
									"\r",
									"morbidityIndex = morbidityIndex ? parseInt(morbidityIndex) + 1 : 1;\r",
									"\r",
									"if (morbidityIndex < morbidityTestNames.length) {\r",
									"    pm.collectionVariables.set(\"morbidityIndex\", morbidityIndex);\r",
									"\r",
									"    pm.execution.setNextRequest(pm.info.requestName);\r",
									"} else {\r",
									"    pm.collectionVariables.set(\"morbidityIndex\", 0);\r",
									"    pm.collectionVariables.unset(\"previousName\");\r",
									"\r",
									"}\r",
									"\r",
									"// Log the completion of the current iteration\r",
									"console.log(\"Completed API call for: \" + pm.variables.get(\"morbiditytestname\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Morbidity-Endpoint}}/:morbidityName",
							"host": [
								"{{BaseURL}}{{Morbidity-Endpoint}}"
							],
							"path": [
								":morbidityName"
							],
							"variable": [
								{
									"key": "morbidityName",
									"value": "{{morbiditytestname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteDietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let dieticianID_List = pm.collectionVariables.get(\"dieticianID_List\") || [];\r",
									"\r",
									"\r",
									"if (dieticianID_List.length === 0) {\r",
									"    console.log(\"No IDs to delete.\");\r",
									"} else {\r",
									"   \r",
									"    dieticianID_List.forEach(dieticianID => {\r",
									"        let url = `https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician${dieticianID}`; \r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: url,\r",
									"            method: 'GET',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': pm.collectionVariables.get(\"Token\") \r",
									"            }\r",
									"        }, function (err, res) {\r",
									"            if (err) {\r",
									"                console.log(`Error deleting dietician ID ${dieticianID}:`, err);\r",
									"            } else {\r",
									"                console.log(`Deleted dietician ID ${dieticianID}`, res);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.collectionVariables.unset(\"dieticianID_List\");\r",
									"}\r",
									"\r",
									"let dieticianID = pm.collectionVariables.get('dieticianID');\r",
									"if(!dieticianID)\r",
									"{\r",
									"\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"} else\r",
									"{\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}/:dieticianId",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							],
							"path": [
								":dieticianId"
							],
							"variable": [
								{
									"key": "dieticianId",
									"value": "{{DieticianID_EndtoEnd}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AdminLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check the response body message",
									"pm.test(\"Response body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logout successful\");",
									"});",
									"",
									"// Verify the session or token is invalidated",
									"var token = pm.environment.get(\"Token\");",
									"pm.sendRequest({",
									"    url: \"https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician\",",
									"    method: \"GET\",",
									"    header: {",
									"        \"Authorization\": \"Bearer \" + token",
									"    }",
									"}, function (err, res) {",
									"    pm.test(\"Token is invalidated\", function () {",
									"        pm.expect(res).to.have.status(401);",
									"    });",
									"});",
									"",
									"// Validate response headers",
									"pm.test(\"Headers are correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"response": [
						{
							"name": "AdminLogout",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"logoutdietician"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 03:14:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Logout successful"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "DieticianLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responsebody = pm.response.json();",
									"const Token = responsebody.token;",
									"pm.environment.set(\"Token\",Token);",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"password\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"email\"",
									"    }",
									"  },",
									"  \"required\": [\"password\", \"userLoginEmail\"]",
									"};",
									"",
									"",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"",
									"const validate = ajv.compile(schema);",
									"const valid = validate(requestBody);",
									"",
									"pm.test(\"Request body schema is valid\", function () {",
									"    pm.expect(valid).to.be.true;",
									"    if (!valid) {",
									"        console.log(validate.errors);",
									"    }",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Successful Login Credential Verification of Dietician\", function () {",
									"    pm.expect(responsebody.loginUserEmail).to.eql(pm.collectionVariables.get(\"dieticianEmail\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\t\"password\": \"{{dieticianPassword}}\",\n  \t\t\t\"userLoginEmail\": \"{{dieticianEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{login-Endpoint}}",
							"host": [
								"{{BaseURL}}{{login-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "DieticianLogin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"Culture22\",\n  \"userLoginEmail\": \"testuser1@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=niFZYQ1EJSFYWdOqZSYg5PGIy66A%2B%2F8%2FaNW4A2DtNqs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=niFZYQ1EJSFYWdOqZSYg5PGIy66A%2B%2F8%2FaNW4A2DtNqs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:51:26 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0dXNlcjFAZ21haWwuY29tIiwiaWF0IjoxNzIyNDAxNDg2LCJleHAiOjE3MjI0MzAyODZ9.dvdGxff-A-hZzDwrExhMrTIGKtaWajC9aUkBVZXWE_6HFOxYoPyweYRucL2xNc_0jsYHbvFFGJ2q7lse4nzzHQ\",\n    \"type\": \"Bearer \",\n    \"userId\": 7069,\n    \"loginUserEmail\": \"testuser1@gmail.com\",\n    \"roles\": [\n        \"ROLE_DIETICIAN\"\n    ]\n}"
						}
					]
				},
				{
					"name": "CreatePatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"",
									"// Define the JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"FirstName\": { \"type\": \"string\" },",
									"        \"LastName\": { \"type\": \"string\" },",
									"        \"ContactNumber\": { \"type\": \"string\" },",
									"        \"Email\": { \"type\": \"string\" },",
									"        \"Allergy\": { \"type\": \"string\" },",
									"        \"FoodPreference\": { \"type\": \"string\" },",
									"        \"CuisineCategory\": { \"type\": \"string\" },",
									"        \"DateOfBirth\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\",\"CuisineCategory\"]",
									"};",
									"",
									"",
									"var patientInfoParam = pm.request.body.formdata.find(item => item.key === 'patientInfo');",
									"var patientInfo = patientInfoParam ? JSON.parse(patientInfoParam.value) : null;",
									"",
									"",
									"var validate = ajv.compile(schema);",
									"var valid = validate(patientInfo);",
									"",
									"if (!valid) {",
									"    console.log(validate.errors);",
									"}",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"// Test for Content-Type header having a particular value",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Authorization header is present\", function () {",
									"    var authHeader = pm.request.headers.get('Authorization');",
									"    pm.expect(authHeader).to.not.be.undefined;",
									"    pm.expect(authHeader).to.not.be.null;",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);",
									"    console.log(\"Authorization header value:\", authHeader);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"const expectedErrorMessage = pm.variables.get(\"expectedMessage\");",
									"var description = pm.collectionVariables.get(\"description\");",
									"if (pm.response.code === 400) {",
									"    pm.test(`Error message is correct for ${description}`, function () {",
									"        pm.expect(responseBody.errorMessage).to.eql(expectedErrorMessage);",
									"    });",
									"} else if(pm.response.code === 201){",
									"",
									"    pm.test(`Successful creation of Patient with ${description}`, function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    pm.test('Schema is valid', function () {",
									"    pm.expect(valid).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Validations for mandatory fields\", function () {",
									"        pm.expect(responseBody).to.have.property(\"patientId\");",
									"        pm.expect(responseBody).to.have.property(\"FirstName\");",
									"        pm.expect(responseBody).to.have.property(\"LastName\");",
									"        pm.expect(responseBody).to.have.property(\"ContactNumber\");",
									"        pm.expect(responseBody).to.have.property(\"Email\");",
									"        pm.expect(responseBody).to.have.property(\"LastVisitDate\");",
									"    });",
									"",
									"    const patientId = responseBody.patientId;",
									"    if (!pm.collectionVariables.get(\"PatientIdEndToEnd\")) {",
									"        pm.collectionVariables.set(\"PatientIdEndToEnd\", patientId);",
									"        pm.collectionVariables.set(\"patientEmail\",responseBody.Email);",
									"    } else {",
									"        pm.collectionVariables.set(\"patientId\", patientId);",
									"    }",
									"    ",
									"    ",
									"    pm.test(\"Response contains FileMorbidity and FileMorbidityCondition\", function () {",
									"        pm.expect(responseBody).to.have.property(\"FileMorbidity\");",
									"        pm.expect(responseBody).to.have.property(\"FileMorbidityCondition\");",
									"    });",
									"",
									"    const fileIds = Object.keys(responseBody.FileMorbidity);",
									"    pm.collectionVariables.set(\"fileIds\", JSON.stringify(fileIds));",
									"    pm.collectionVariables.set(\"currentIndex\", 0); // setting the index to iterate through fileIds in the upcoming request",
									"    console.log(\"fileIds: \" + fileIds);",
									"}else if(pm.response.code === 401){",
									"    pm.test(`UnAuthorized Credentials ${description}`, function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"} else if(pm.response.code === 415){",
									"    pm.test(`Unsupported Media Type ${description}`, function () {",
									"        pm.response.to.have.status(415);",
									"    });",
									"}else if(pm.response.code === 405){",
									"    pm.test(`Wrong Method API Call ${description}`, function () {",
									"        pm.response.to.have.status(405);",
									"    });",
									"} else {",
									"    console.log(\"UnKnown Error\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [
										"postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903",
										"postman-cloud:///1ef4ef00-2b5e-4f50-a0d7-6254484e8d81"
									]
								},
								{
									"key": "patientInfo",
									"value": " { \"FirstName\": \"{{P_firstName}}\",\n\"LastName\": \"{{P_lastName}}\",\n\"ContactNumber\": \"{{P_ContactNumber}}\",\n\"Email\": \"{{P_Email}}\",\n\"Allergy\": \"{{P_Allergy}}\",\n\"FoodPreference\": \"{{P_FoodPreferences}}\",\n\"CuisineCategory\":\"{{P_CuisineCat}}\",\n\"DateOfBirth\": \"{{P_DOB}}\"\n}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "CreatePatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myfirstpatient\",\n\"LastName\": \"trial\",\n\"ContactNumber\": \"6780001111\",\n\"Email\": \"PMDPatient1@gmail.com\",\n\"Allergy\": \"peanut\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\": \"Indian\",\n\"DateOfBirth\": \"1962-07-26\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401716&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zp2XzoEYkLWizda6za%2BGYgph2TvtYUcwCOq1lm1fSOM%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401716&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zp2XzoEYkLWizda6za%2BGYgph2TvtYUcwCOq1lm1fSOM%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:55:16 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 15,\n    \"FirstName\": \"Myfirstpatient\",\n    \"LastName\": \"trial\",\n    \"ContactNumber\": \"6780001111\",\n    \"Email\": \"PMDPatient1@gmail.com\",\n    \"Allergy\": \"peanut\",\n    \"FoodPreference\": \"Vegan\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66a9c3b42eaf4c43ee32772a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1962-07-26\",\n    \"DieticianId\": 166,\n    \"Vitals\": {\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T04:55:16.761+00:00\"\n}"
						},
						{
							"name": "SuccessfulCreatePatient2",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Hema\",\n\"LastName\": \"Malini\",\n\"ContactNumber\": \"6780001114\",\n\"Email\": \"PMDPatient4@gmail.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\": \"Indian\",\n\"DateOfBirth\": \"1986-10-07\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722438844&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=F%2BP9EJLewKJ3KqL3GPx5Zq7DHQ6%2F%2BHreWbHA%2FgrJVl0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722438844&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=F%2BP9EJLewKJ3KqL3GPx5Zq7DHQ6%2F%2BHreWbHA%2FgrJVl0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 15:14:04 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 22,\n    \"FirstName\": \"Hema\",\n    \"LastName\": \"Malini\",\n    \"ContactNumber\": \"6780001114\",\n    \"Email\": \"PMDPatient4@gmail.com\",\n    \"Allergy\": \"soy\",\n    \"FoodPreference\": \"Vegan\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66aa54bce6f5802145ab04f8\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aa54bce6f5802145ab04f8\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1986-10-07\",\n    \"DieticianId\": 166,\n    \"Vitals\": {\n        \"66aa54bce6f5802145ab04f8\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T15:14:04.550+00:00\"\n}"
						},
						{
							"name": "CreatePatient_InvalidName",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"TestDatapatient1\",\n\"LastName\": \"NegPMD\",\n\"ContactNumber\": \"6780001111\",\n\"Email\": \"TestDatapatient@gmail.com\",\n\"Allergy\": \"peanut\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\": \"Indian\",\n\"DateOfBirth\": \"1912-12-12\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": [
												"postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903",
												"postman-cloud:///1ef4efb9-a085-4590-af48-4da19c655321"
											]
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722552819&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=j6Br423SsiT6CuwpCx9DWIvyTERgBBCLKdaAZluqiIU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722552819&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=j6Br423SsiT6CuwpCx9DWIvyTERgBBCLKdaAZluqiIU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 22:53:40 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"FirstName should only contain Alphabets\"\n}"
						}
					]
				},
				{
					"name": "UpdatePatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"// Define the JSON schema\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"FirstName\": { \"type\": \"string\" },\r",
									"        \"LastName\": { \"type\": \"string\" },\r",
									"        \"ContactNumber\": { \"type\": \"string\" },\r",
									"        \"Email\": { \"type\": \"string\" },\r",
									"        \"Allergy\": { \"type\": \"string\" },\r",
									"        \"FoodPreference\": { \"type\": \"string\" },\r",
									"        \"CuisineCategory\": { \"type\": \"string\" },\r",
									"        \"DateOfBirth\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\",\"CuisineCategory\"]\r",
									"};\r",
									"\r",
									"\r",
									"var patientInfoParam = pm.request.body.formdata.find(item => item.key === 'patientInfo');\r",
									"var patientInfo = patientInfoParam ? JSON.parse(patientInfoParam.value) : null;\r",
									"\r",
									"\r",
									"var validate = ajv.compile(schema);\r",
									"var valid = validate(patientInfo);\r",
									"\r",
									"if (!valid) {\r",
									"    console.log(validate.errors);\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									"const responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"const expectedErrorMessage = pm.variables.get(\"expectedMessage\");\r",
									"var description = pm.collectionVariables.get(\"description\");\r",
									"if (pm.response.code === 400) {\r",
									"    pm.test(`Error message is correct for ${description}`, function () {\r",
									"        pm.expect(responseBody.errorMessage).to.eql(expectedErrorMessage);\r",
									"    });\r",
									"} else if(pm.response.code === 200){\r",
									"\r",
									"    pm.test(`Successful Updation of Patient with ${description}`, function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test('Schema is valid', function () {\r",
									"    pm.expect(valid).to.be.true;\r",
									"    });\r",
									"    pm.test(\"Validations for mandatory fields\", function () {\r",
									"        pm.expect(responseBody).to.have.property(\"patientId\");\r",
									"        pm.expect(responseBody).to.have.property(\"FirstName\");\r",
									"        pm.expect(responseBody).to.have.property(\"LastName\");\r",
									"        pm.expect(responseBody).to.have.property(\"ContactNumber\");\r",
									"        pm.expect(responseBody).to.have.property(\"Email\");\r",
									"        pm.expect(responseBody).to.have.property(\"LastVisitDate\");\r",
									"    });\r",
									"\r",
									"    const patientId = responseBody.patientId;\r",
									"    pm.collectionVariables.set(\"patientId\", patientId);\r",
									"    \r",
									"    pm.test(\"Response contains FileMorbidity and FileMorbidityCondition\", function () {\r",
									"        pm.expect(responseBody).to.have.property(\"FileMorbidity\");\r",
									"        pm.expect(responseBody).to.have.property(\"FileMorbidityCondition\");\r",
									"    });\r",
									"    }else if(pm.response.code === 401){\r",
									"    pm.test(`UnAuthorized Credentials ${description}`, function () {\r",
									"        pm.response.to.have.status(401);\r",
									"    });\r",
									"    } else if(pm.response.code === 415){\r",
									"    pm.test(`Unsupported Media Type ${description}`, function () {\r",
									"        pm.response.to.have.status(415);\r",
									"    });\r",
									"    }else if(pm.response.code === 405){\r",
									"    pm.test(`Wrong Method API Call ${description}`, function () {\r",
									"        pm.response.to.have.status(405);\r",
									"    });\r",
									"    } else {\r",
									"    console.log(\"UnKnown Error\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{P_firstName}}\",\n\"LastName\": \"{{P_lastName}}\",\n\"ContactNumber\": \"{{P_ContactNumber}}\",\n\"Email\": \"{{P_Email}}\",\n\"Allergy\": \"{{P_Allergy}}\",\n\"FoodPreference\": \"{{P_FoodPreferences}}\",\n\"CuisineCategory\":\"{{P_CuisineCat}}\",\n\"DateOfBirth\": \"{{P_DOB}}\"\n}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [
										"postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903",
										"postman-cloud:///1ef4ef00-2b5e-4f50-a0d7-6254484e8d81"
									]
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId\n",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}"
							],
							"path": [
								":patientId\n"
							],
							"variable": [
								{
									"key": "patientId\n",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "UpdatePatientDetails",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myfirstpatient\",\n\"LastName\": \"modified\",\n\"ContactNumber\": \"7720001111\",\n\"Email\": \"PMDPatient1@gmail.com\",\n\"Allergy\": \"peanut\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\": \"South Indian\",\n\"DateOfBirth\": \"1962-07-26\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/:patientId\n",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient",
										":patientId\n"
									],
									"variable": [
										{
											"key": "patientId\n",
											"value": "15"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722402636&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1nhVqPpXWCrAV4Hbd5aoTgIIjj1vk8HGC4OMV0M8t6s%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722402636&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1nhVqPpXWCrAV4Hbd5aoTgIIjj1vk8HGC4OMV0M8t6s%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 05:10:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 15,\n    \"FirstName\": \"Myfirstpatient\",\n    \"LastName\": \"modified\",\n    \"ContactNumber\": \"7720001111\",\n    \"Email\": \"PMDPatient1@gmail.com\",\n    \"Allergy\": \"peanut\",\n    \"FoodPreference\": \"Vegan\",\n    \"CuisineCategory\": \"South Indian\",\n    \"FileMorbidity\": {\n        \"66a9c74c2eaf4c43ee32772e\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66a9c74c2eaf4c43ee32772e\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66a9c3b42eaf4c43ee32772a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1962-07-26\",\n    \"DieticianId\": 166,\n    \"Vitals\": {\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T04:55:16.761+00:00\"\n}"
						},
						{
							"name": "UpatientPatientDetailWithAll3Files",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myfirstpatient\",\n\"LastName\": \"modified\",\n\"ContactNumber\": \"7720001111\",\n\"Email\": \"PMDPatient1@gmail.com\",\n\"Allergy\": \"peanut\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\": \"South Indian\",\n\"DateOfBirth\": \"1962-07-26\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": [
												"postman-cloud:///1ef4efb9-a085-4590-af48-4da19c655321",
												"postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903",
												"postman-cloud:///1ef4ef00-2b5e-4f50-a0d7-6254484e8d81"
											]
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient/:patientId\n",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient",
										":patientId\n"
									],
									"variable": [
										{
											"key": "patientId\n",
											"value": "15"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722402812&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TYxMbiDm%2F1cZ3RnsnewvtHJRqw4%2B%2BabscBtmF4FTAyo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722402812&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TYxMbiDm%2F1cZ3RnsnewvtHJRqw4%2B%2BabscBtmF4FTAyo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 05:13:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 15,\n    \"FirstName\": \"Myfirstpatient\",\n    \"LastName\": \"modified\",\n    \"ContactNumber\": \"7720001111\",\n    \"Email\": \"PMDPatient1@gmail.com\",\n    \"Allergy\": \"peanut\",\n    \"FoodPreference\": \"Vegan\",\n    \"CuisineCategory\": \"South Indian\",\n    \"FileMorbidity\": {\n        \"66a9c7922eaf4c43ee327732\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66a9c74c2eaf4c43ee32772e\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66a9c7fc2eaf4c43ee327736\": {\n            \"T4\": \"1.22 µg/dl\",\n            \"TSH\": \"100.0 mIU/L\"\n        },\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66a9c7922eaf4c43ee327732\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66a9c74c2eaf4c43ee32772e\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66a9c7fc2eaf4c43ee327736\": \"Thyroid: Hypothyroidism \\n\",\n        \"66a9c3b42eaf4c43ee32772a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1962-07-26\",\n    \"DieticianId\": 166,\n    \"Vitals\": {\n        \"66a9c3b42eaf4c43ee32772a\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T04:55:16.761+00:00\"\n}"
						},
						{
							"name": "UpdatePatientDetails",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myseventhpatient\",\n\"LastName\": \"PMD\",\n\"ContactNumber\": \"6780001117\",\n\"Email\": \"PMDPatient7@gmail.com\",\n\"Allergy\": \"almond\",\n\"FoodPreference\": \"Eggetarian\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1968-01-24\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": [
												"postman-cloud:///1ef4efb9-a085-4590-af48-4da19c655321",
												"postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
											]
										},
										{
											"key": "vitals",
											"value": "{\n       \"Weight\" : 123.00,\n       \"Height\" : 5.7,\n        \"Temperature\" : 98.60,\n        \"SP\" : 5,\n        \"DP\" : 4\n \n             \t}\n",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId\n",
									"host": [
										"{{BaseURL}}{{Patient-Endpoint}}"
									],
									"path": [
										":patientId\n"
									],
									"variable": [
										{
											"key": "patientId\n",
											"value": "{{patientId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722491554&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xK0E%2FbLwwmQ69L3mByC%2Fl8wQYNg2GbP0uUs3jJRVQNU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722491554&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xK0E%2FbLwwmQ69L3mByC%2Fl8wQYNg2GbP0uUs3jJRVQNU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 05:52:35 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 107,\n    \"FirstName\": \"Myseventhpatient\",\n    \"LastName\": \"PMD\",\n    \"ContactNumber\": \"6780001117\",\n    \"Email\": \"PMDPatient7@gmail.com\",\n    \"Allergy\": \"almond\",\n    \"FoodPreference\": \"Eggetarian\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66ab2228e6f5802145ab0628\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab1cf7e6f5802145ab060a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2121e6f5802145ab0618\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2188e6f5802145ab0620\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2033e6f5802145ab0610\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2143e6f5802145ab061c\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab22a3e6f5802145ab062c\": {\n            \"T4\": \"1.22 µg/dl\",\n            \"TSH\": \"100.0 mIU/L\"\n        },\n        \"66ab2105e6f5802145ab0614\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab21c8e6f5802145ab0624\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ab2228e6f5802145ab0628\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab1cf7e6f5802145ab060a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\",\n        \"66ab2121e6f5802145ab0618\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2188e6f5802145ab0620\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2033e6f5802145ab0610\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2143e6f5802145ab061c\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab22a3e6f5802145ab062c\": \"Thyroid: Hypothyroidism \\n\",\n        \"66ab2105e6f5802145ab0614\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab21c8e6f5802145ab0624\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"1968-01-24\",\n    \"DieticianId\": 299,\n    \"Vitals\": {\n        \"66ab1cf7e6f5802145ab060a\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-01T05:28:23.113+00:00\"\n}"
						}
					]
				},
				{
					"name": "AddNewReportswithorwithoutVitals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"const patientInfoSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodPreference\": { \"type\": \"string\" },\r",
									"    \"CuisineCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\", \"format\": \"date\" }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"DateOfBirth\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"const vitalsSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Weight\": { \"type\": \"number\" },\r",
									"    \"Height\": { \"type\": \"number\" },\r",
									"    \"Temperature\": { \"type\": \"number\" },\r",
									"    \"SP\": { \"type\": \"integer\" },\r",
									"    \"DP\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Weight\",\r",
									"    \"Height\",\r",
									"    \"Temperature\",\r",
									"    \"SP\",\r",
									"    \"DP\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"const validatePatientInfo = ajv.compile(patientInfoSchema);\r",
									"const validateVitals = ajv.compile(vitalsSchema);\r",
									"\r",
									"// Extract patientInfo\r",
									"const patientInfo = JSON.parse(pm.request.body.formdata.find(item => item.key === 'patientInfo').value);\r",
									"const isPatientInfoValid = validatePatientInfo(patientInfo);\r",
									"\r",
									"pm.test(\"PatientInfo schema is valid\", function () {\r",
									"    pm.expect(isPatientInfoValid).to.be.true;\r",
									"    if (!isPatientInfoValid) {\r",
									"        console.log(\"PatientInfo validation errors:\", validatePatientInfo.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Extract vitals\r",
									"const vitals = JSON.parse(pm.request.body.formdata.find(item => item.key === 'vitals').value);\r",
									"const isVitalsValid = validateVitals(vitals);\r",
									"\r",
									"pm.test(\"Vitals schema is valid\", function () {\r",
									"    pm.expect(isVitalsValid).to.be.true;\r",
									"    if (!isVitalsValid) {\r",
									"        console.log(\"Vitals validation errors:\", validateVitals.errors);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check for file\r",
									"pm.test(\"File is present in form-data\", function () {\r",
									"    const fileParam = pm.request.body.formdata.find(item => item.key === 'file');\r",
									"    pm.expect(fileParam).to.not.be.undefined;\r",
									"    pm.expect(fileParam.type).to.equal('file');\r",
									"});\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/); \r",
									"    console.log(\"Authorization header value:\", authHeader);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"    console.log(pm.response.code);\r",
									"    console.log(pm.variables.get(\"statusCode\"));\r",
									"\r",
									"}) \r",
									"\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// let parsedPdfText = pm.environment.get(\"parsedPdfText\");\r",
									"// let responseText = pm.response.json().pdfText; \r",
									"// const expectedValues = {\r",
									"//     \"Name\": \"PmdPatienNewwithfiles Pmdteamthreewithfiles\"\r",
									"// };\r",
									"\r",
									"// let nameMatch = parsedPdfText.match(/Name\\s*:\\s*(.*)/);\r",
									"// pm.test(\"Check Name value in the parsed PDF content\", function () {\r",
									"//     pm.expect(nameMatch).to.not.be.null; \r",
									"//     let extractedName = nameMatch[1].trim();\r",
									"//     pm.expect(extractedName).to.equal(expectedValues);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{P_firstName}}\",\n\"LastName\": \"{{P_lastName}}\",\n\"ContactNumber\": \"{{P_ContactNumber}}\",\n\"Email\": \"{{P_Email}}\",\n\"Allergy\": \"{{P_Allergy}}\",\n\"FoodPreference\": \"{{P_FoodPreferences}}\",\n\"CuisineCategory\":\"{{P_CuisineCat}}\",\n\"DateOfBirth\": \"{{P_DOB}}\"\n}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
								},
								{
									"key": "vitals",
									"value": " {\n       \"Weight\" : {{P_Weight}},\n       \"Height\" : {{P_Height}},\n        \"Temperature\" : {{P_Temperature}},\n        \"SP\" : {{P_SP}},\n        \"DP\" : {{P_DP}}\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}{{AddNewReports}}/:patientId",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}{{AddNewReports}}"
							],
							"path": [
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "AddNewReports",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myseventhpatient\",\n\"LastName\": \"PMD\",\n\"ContactNumber\": \"6780001117\",\n\"Email\": \"PMDPatient7@gmail.com\",\n\"Allergy\": \"almond\",\n\"FoodPreference\": \"Eggetarian\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1968-01-24\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 154,\n       “Height” : 5.8,\n        “Temperature” : 98.6,\n        “SP” :0.4,\n        “DP” : 1.0\n}\n",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId",
									"host": [
										"{{BaseURL}}{{Patient-Endpoint}}"
									],
									"path": [
										":patientId"
									],
									"variable": [
										{
											"key": "patientId",
											"value": "{{patientId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722464372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s2aoTv8g88Rprkz%2BCWL7vfAj7opgsa1oAQCoZ3nv4T0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722464372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s2aoTv8g88Rprkz%2BCWL7vfAj7opgsa1oAQCoZ3nv4T0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 22:19:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 35,\n    \"FirstName\": \"Myseventhpatient\",\n    \"LastName\": \"PMD\",\n    \"ContactNumber\": \"6780001117\",\n    \"Email\": \"PMDPatient7@gmail.com\",\n    \"Allergy\": \"almond\",\n    \"FoodPreference\": \"Eggetarian\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66aab715e6f5802145ab0524\": {\n            \"T4\": \"1.22 µg/dl\",\n            \"TSH\": \"100.0 mIU/L\"\n        },\n        \"66aab7f6e6f5802145ab052e\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66aab7bce6f5802145ab052a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66aab7a1e6f5802145ab0528\": {\n            \"T4\": \"1.22 µg/dl\",\n            \"TSH\": \"100.0 mIU/L\"\n        },\n        \"66aab10fe6f5802145ab051e\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66aab767e6f5802145ab0526\": {\n            \"T4\": \"1.22 µg/dl\",\n            \"TSH\": \"100.0 mIU/L\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aab715e6f5802145ab0524\": \"Thyroid: Hypothyroidism \\n\",\n        \"66aab7f6e6f5802145ab052e\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66aab7bce6f5802145ab052a\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66aab7a1e6f5802145ab0528\": \"Thyroid: Hypothyroidism \\n\",\n        \"66aab10fe6f5802145ab051e\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\",\n        \"66aab767e6f5802145ab0526\": \"Thyroid: Hypothyroidism \\n\"\n    },\n    \"DateOfBirth\": \"1968-01-24\",\n    \"DieticianId\": 166,\n    \"Vitals\": {\n        \"66aab10fe6f5802145ab051e\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:47:59.169+00:00\"\n}"
						},
						{
							"name": "AddNewReports2",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Myseventhpatient\",\n\"LastName\": \"PMD\",\n\"ContactNumber\": \"6780001117\",\n\"Email\": \"PMDPatient7@gmail.com\",\n\"Allergy\": \"almond\",\n\"FoodPreference\": \"Eggetarian\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1968-01-24\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4ef41-5eee-4820-9a11-9ca9d2411903"
										},
										{
											"key": "vitals",
											"value": "{\n       \"Weight\" : 123.00,\n       \"Height\" : 5.7,\n        \"Temperature\" : 98.60,\n        \"SP\" : 5,\n        \"DP\" : 4\n \n             \t}\n",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId",
									"host": [
										"{{BaseURL}}{{Patient-Endpoint}}"
									],
									"path": [
										":patientId"
									],
									"variable": [
										{
											"key": "patientId",
											"value": "{{patientId}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722491432&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=YLUVR3hKqdKEDrEDvwSY8T70YztHGfMvkOp75NzvAdc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722491432&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=YLUVR3hKqdKEDrEDvwSY8T70YztHGfMvkOp75NzvAdc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 01 Aug 2024 05:50:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 107,\n    \"FirstName\": \"Myseventhpatient\",\n    \"LastName\": \"PMD\",\n    \"ContactNumber\": \"6780001117\",\n    \"Email\": \"PMDPatient7@gmail.com\",\n    \"Allergy\": \"almond\",\n    \"FoodPreference\": \"Eggetarian\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66ab2228e6f5802145ab0628\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab1cf7e6f5802145ab060a\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2121e6f5802145ab0618\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2188e6f5802145ab0620\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2033e6f5802145ab0610\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2143e6f5802145ab061c\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab2105e6f5802145ab0614\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        },\n        \"66ab21c8e6f5802145ab0624\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ab2228e6f5802145ab0628\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab1cf7e6f5802145ab060a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\",\n        \"66ab2121e6f5802145ab0618\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2188e6f5802145ab0620\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2033e6f5802145ab0610\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2143e6f5802145ab061c\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab2105e6f5802145ab0614\": \"Thyroid: Hyperthyroidism \\n\",\n        \"66ab21c8e6f5802145ab0624\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"1968-01-24\",\n    \"DieticianId\": 299,\n    \"Vitals\": {\n        \"66ab1cf7e6f5802145ab060a\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-01T05:28:23.113+00:00\"\n}"
						}
					]
				},
				{
					"name": "Get all Morbidities_Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"let testNames = [];\r",
									"responseJson.forEach(morbidity => {\r",
									"    testNames.push(morbidity.morbidityTestName);\r",
									"});\r",
									"pm.collectionVariables.set(\"morbidityTestNames\", JSON.stringify(testNames));\r",
									"console.log(\"Extracted morbidity test names:\", testNames);\r",
									"\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Morbidity-Endpoint}}",
							"host": [
								"{{BaseURL}}{{Morbidity-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "Get all Morbidities",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}{{Morbidity-Endpoint}}",
									"host": [
										"{{BaseURL}}{{Morbidity-Endpoint}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722464453&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=lXC6fB%2FZxR4Cq6eg5Dkzp9mRSgdU7PFd58pKTz1OBfY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722464453&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=lXC6fB%2FZxR4Cq6eg5Dkzp9mRSgdU7PFd58pKTz1OBfY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 22:20:53 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 125,\n        \"morbidityMarkerMaxVal\": 100\n    },\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 6,\n        \"morbidityTestId\": \"THYRO_TSH_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"uIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
						}
					]
				},
				{
					"name": "MorbitdityTestname_Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"// Retrieve the list of test names and the current index\r",
									"let morbidityTestNames = pm.collectionVariables.get(\"morbidityTestNames\");\r",
									"let morbidityIndex = pm.collectionVariables.get(\"morbidityIndex\");\r",
									"\r",
									"// Parse the list if it's a string\r",
									"if (typeof morbidityTestNames === 'string') {\r",
									"    morbidityTestNames = JSON.parse(morbidityTestNames);\r",
									"}\r",
									"\r",
									"// Increment the currentIndex\r",
									"morbidityIndex = morbidityIndex ? parseInt(morbidityIndex) + 1 : 1;\r",
									"\r",
									"// Check if we have more test names to iterate through\r",
									"if (morbidityIndex < morbidityTestNames.length) {\r",
									"    // Update the currentIndex in collection variables\r",
									"    pm.collectionVariables.set(\"morbidityIndex\", morbidityIndex);\r",
									"\r",
									"    // Set the next request to be executed\r",
									"    pm.execution.setNextRequest(pm.info.requestName);\r",
									"} else {\r",
									"    // Reset the currentIndex and clear collection variables if needed\r",
									"    pm.collectionVariables.set(\"morbidityIndex\", 0);\r",
									"    pm.collectionVariables.unset(\"previousName\");\r",
									"\r",
									"    // Stop the iteration by not setting the next request\r",
									"    pm.execution.setNextRequest(\"GETAllPatients\");\r",
									"}\r",
									"\r",
									"// Log the completion of the current iteration\r",
									"console.log(\"Completed API call for: \" + pm.variables.get(\"morbiditytestname\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Retrieve the list of test names, the current index, and the previous test name",
									"let morbidityTestNames = pm.collectionVariables.get(\"morbidityTestNames\");",
									"let morbidityIndex = pm.collectionVariables.get(\"morbidityIndex\");",
									"let previousName = pm.collectionVariables.get(\"previousName\");",
									"",
									"// Parse the list if it's a string",
									"if (typeof morbidityTestNames === 'string') {",
									"    morbidityTestNames = JSON.parse(morbidityTestNames);",
									"}",
									"",
									"// Initialize currentIndex if it's not set",
									"if (!morbidityIndex) {",
									"    morbidityIndex = 0;",
									"} else {",
									"    morbidityIndex = parseInt(morbidityIndex);",
									"}",
									"",
									"// Check if we need to skip the current name",
									"if (morbidityTestNames[morbidityIndex] === previousName) {",
									"    // Move to the next index",
									"    morbidityIndex++;",
									"}",
									"",
									"// Set the morbiditytestname parameter to the current test name",
									"if (morbidityIndex < morbidityTestNames.length) {",
									"    pm.collectionVariables.set(\"morbiditytestname\", morbidityTestNames[morbidityIndex]);",
									"    pm.collectionVariables.set(\"previousName\", morbidityTestNames[morbidityIndex]);",
									"} else {",
									"    // Reset the currentIndex if out of bounds",
									"    pm.collectionVariables.set(\"morbidityIndex\", 0);",
									"    pm.variables.unset(\"morbiditytestname\");",
									"}",
									"",
									"// Update the currentIndex in collection variables",
									"pm.collectionVariables.set(\"morbidityIndex\", morbidityIndex);",
									"",
									"// Log the current test name for debugging purposes",
									"console.log(\"Calling API for: \" + pm.variables.get(\"morbiditytestname\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Morbidity-Endpoint}}/:morbidityName",
							"host": [
								"{{BaseURL}}{{Morbidity-Endpoint}}"
							],
							"path": [
								":morbidityName"
							],
							"variable": [
								{
									"key": "morbidityName",
									"value": "{{morbiditytestname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GETAllPatients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let patientIds = [];",
									"let patientFilesMap = new Map();",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.response.to.have.responseTime.below(500);",
									"});",
									"pm.test(\"Response should be in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response contains patient data\", function () {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(patient => {",
									"        pm.expect(patient).to.have.property('patientId');",
									"        pm.expect(patient).to.have.property('FirstName');",
									"        pm.expect(patient).to.have.property('LastName');",
									"        pm.expect(patient).to.have.property('Email');",
									"        pm.expect(patient).to.have.property('Allergy');",
									"        pm.expect(patient).to.have.property('CuisineCategory');",
									"        pm.expect(patient).to.have.property('DieticianId');",
									"        pm.expect(patient).to.have.property('DateOfBirth');",
									"        pm.expect(patient).to.have.property('ContactNumber');",
									"   ",
									"    });",
									"});",
									"pm.test(\"Authorization header is present\", function () {",
									"    var authHeader = pm.request.headers.get('Authorization');",
									"    pm.expect(authHeader).to.not.be.undefined;",
									"    pm.expect(authHeader).to.not.be.null;",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "GETAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722403331&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ASyS%2FNfajLWJqJyWrnDStCtk0veJj4JXtJCOQEg3VC0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722403331&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ASyS%2FNfajLWJqJyWrnDStCtk0veJj4JXtJCOQEg3VC0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 05:22:11 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"patientId\": 15,\n        \"FirstName\": \"Myfirstpatient\",\n        \"LastName\": \"modified\",\n        \"ContactNumber\": \"7720001111\",\n        \"Email\": \"PMDPatient1@gmail.com\",\n        \"Allergy\": \"peanut\",\n        \"FoodPreference\": \"Vegan\",\n        \"CuisineCategory\": \"South Indian\",\n        \"FileMorbidity\": {\n            \"66a9c7922eaf4c43ee327732\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            },\n            \"66a9c74c2eaf4c43ee32772e\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            },\n            \"66a9c7fc2eaf4c43ee327736\": {\n                \"T4\": \"1.22 µg/dl\",\n                \"TSH\": \"100.0 mIU/L\"\n            },\n            \"66a9c3b42eaf4c43ee32772a\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66a9c7922eaf4c43ee327732\": \"Thyroid: Hyperthyroidism \\n\",\n            \"66a9c74c2eaf4c43ee32772e\": \"Thyroid: Hyperthyroidism \\n\",\n            \"66a9c7fc2eaf4c43ee327736\": \"Thyroid: Hypothyroidism \\n\",\n            \"66a9c3b42eaf4c43ee32772a\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1962-07-26\",\n        \"DieticianId\": 166,\n        \"Vitals\": {\n            \"66a9c3b42eaf4c43ee32772a\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-07-31T04:55:16.761+00:00\"\n    },\n    {\n        \"patientId\": 17,\n        \"FirstName\": \"Mysecondpatient\",\n        \"LastName\": \"PMD\",\n        \"ContactNumber\": \"7720001112\",\n        \"Email\": \"PMDPatient2@gmail.com\",\n        \"Allergy\": \"MILK\",\n        \"FoodPreference\": \"Vegan\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66a9c9ec2eaf4c43ee327738\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66a9c9ec2eaf4c43ee327738\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1964-08-16\",\n        \"DieticianId\": 166,\n        \"Vitals\": {\n            \"66a9c9ec2eaf4c43ee327738\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-07-31T05:21:48.352+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetPatientbyFileID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" const fileIds = JSON.parse(pm.collectionVariables.get(\"fileIds\"));",
									"",
									"",
									"let patientFileIndex = pm.collectionVariables.get('patientFileIndex') || 0;",
									"",
									"if (fileIds.length > 0 && patientFileIndex < fileIds.length) {",
									"    let fileId = fileIds[patientFileIndex];",
									"    console.log(\"currentFileId,currentIndex\",fileId,patientFileIndex);",
									"    pm.collectionVariables.set('currentFileId', fileId);",
									"    pm.collectionVariables.set('patientFileIndex', Number(patientFileIndex) + 1);",
									"    pm.execution.setNextRequest('GetPatientbyFileID'); ",
									"} else {",
									"    pm.collectionVariables.set('patientFileIndex', 0);",
									" pm.execution.setNextRequest(\"DeletePatient\"); ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let fileId = pm.collectionVariables.get(\"currentFileId\");\r",
									"let patientId = pm.collectionVariables.get(\"patientId\");\r",
									"let patientFilesArray =pm.collectionVariables.get(\"patientFilesMap\");\r",
									"if(fileId && patientId)\r",
									"{\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else if(!fileId ||!patientId){\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"    });\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"}\r",
									"pm.test(\"Authorization header is present\", function () {\r",
									"    var authHeader = pm.request.headers.get('Authorization');\r",
									"    pm.expect(authHeader).to.not.be.undefined;\r",
									"    pm.expect(authHeader).to.not.be.null;\r",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/pdf\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{currentFileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletePatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let patientId = pm.collectionVariables.get('patientId');",
									"if(!patientId)",
									"{",
									"",
									"    pm.test(\"Status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"} else",
									"{",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.test(\"Status message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"}",
									"pm.test(\"Authorization header is present\", function () {",
									"    var authHeader = pm.request.headers.get('Authorization');",
									"    pm.expect(authHeader).to.not.be.undefined;",
									"    pm.expect(authHeader).to.not.be.null;",
									"    pm.expect(authHeader).to.match(/^Bearer\\s+/);",
									"});",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let patientId = pm.collectionVariables.get(\"patientId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}"
							],
							"path": [
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DieticianLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check the response body message\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Logout successful\");\r",
									"});\r",
									"\r",
									"// Verify the session or token is invalidated\r",
									"var token = pm.environment.get(\"Token\");\r",
									"pm.sendRequest({\r",
									"    url: \"https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient\",\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + token\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Token is invalidated\", function () {\r",
									"        pm.expect(res).to.have.status(401);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Validate response headers\r",
									"pm.test(\"Headers are correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Logout-Endpoint}}",
							"host": [
								"{{BaseURL}}{{Logout-Endpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "UserLogout",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"logoutdietician"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 03:14:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Logout successful"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "PatientLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responsebody = pm.response.json();\r",
									"const Token = responsebody.token;\r",
									"pm.environment.set(\"Token\",Token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let patientPassword = pm.collectionVariables.get(\"patientPassword\");",
									"let patientEmail = pm.collectionVariables.get(\"patientEmail\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientEmail}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Reports",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let PatientIdEndToEnd = pm.collectionVariables.get(\"PatientIdEndToEnd\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code matches expected status code\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"}) \r",
									"\r",
									"let responseBody = pm.response.json();\r",
									"console.log(\"responseBody: \", responseBody);\r",
									"\r",
									"let endFileIDs = [];\r",
									"responseBody.forEach(item => { endFileIDs.push(item.fileId); });\r",
									"\r",
									"console.log(\"endfileIDs: \", JSON.stringify(endFileIDs));\r",
									"pm.collectionVariables.set('endFileIDs',JSON.stringify(endFileIDs));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}/testReports/:patientId\n",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}"
							],
							"path": [
								"testReports",
								":patientId\n"
							],
							"variable": [
								{
									"key": "patientId\n",
									"value": "{{PatientIdEndToEnd}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPatientbyFileID_Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const responseHeaders = pm.response.headers.all();\r",
									"const contentTypeHeader = responseHeaders.find(header => header.key.toLowerCase() === 'content-type');\r",
									"\r",
									"const isPDF = contentTypeHeader && contentTypeHeader.value.includes('application/pdf');\r",
									"\r",
									"pm.test(\"Response is a PDF\", function () {\r",
									"    pm.expect(isPDF).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"// const fileIds = JSON.parse(pm.collectionVariables.get(\"fileIds\"));\r",
									"// const currentIndex = parseInt(pm.collectionVariables.get(\"currentIndex\"));\r",
									"\r",
									"//  console.log(\"currentIndex & NoOfFileIds\",currentIndex,fileIds.length);\r",
									"// if (currentIndex < fileIds.length) { \r",
									"//     pm.collectionVariables.set(\"currentIndex\", currentIndex + 1); \r",
									"//     pm.collectionVariables.set(\"fileId\", fileIds[currentIndex]); \r",
									"//     pm.execution.setNextRequest(\"GetPatientbyFileID_Patient\"); \r",
									"// } else {\r",
									"//     pm.execution.setNextRequest(\"GetAllMorbiditiesPatient\"); \r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const endFileIDs = pm.collectionVariables.get(\"endFileIDs\");\r",
									"// console.log(\"endfileIDs: \", endFileIDs);\r",
									"// let patientFileIndex = pm.collectionVariables.get('patientFileIndex') || 0;\r",
									"\r",
									"// if (endFileIDs.length > 0 && patientFileIndex < endFileIDs.length) {\r",
									"//     let patientfileID = endFileIDs[patientFileIndex];\r",
									"//     console.log(\"currentFileId,currentIndex\",patientfileID,patientFileIndex);\r",
									"//     pm.collectionVariables.set('patientfileID', patientfileID);\r",
									"//     pm.collectionVariables.set('patientFileIndex', Number(patientFileIndex) + 1);\r",
									"//     pm.execution.setNextRequest('GetPatientbyFileID'); \r",
									"// } else {\r",
									"//     pm.collectionVariables.set('patientFileIndex', 0);\r",
									"//     pm.execution.setNextRequest(\"Get all Morbidities_Patient\"); \r",
									"// }\r",
									"\r",
									"const endFileIDsString = pm.collectionVariables.get(\"endFileIDs\");\r",
									"const endFileIDs = endFileIDsString ? JSON.parse(endFileIDsString) : [];\r",
									"console.log(\"endFileIDs: \", endFileIDs);\r",
									"let patientFileIndex = Number(pm.collectionVariables.get('patientFileIndex')) || 0;\r",
									"\r",
									"if (endFileIDs.length > 0 && patientFileIndex < endFileIDs.length) {\r",
									"    let patientfileID = endFileIDs[patientFileIndex];\r",
									"    console.log(\"currentFileId, currentIndex\", patientfileID, patientFileIndex);\r",
									"    pm.collectionVariables.set('patientfileID', patientfileID);\r",
									"    pm.collectionVariables.set('patientFileIndex', Number(patientFileIndex) + 1);\r",
									"    pm.execution.setNextRequest('GetPatientbyFileID_Patient'); \r",
									"} else {\r",
									"    pm.collectionVariables.set('patientFileIndex', 0);\r",
									"    pm.execution.setNextRequest(\"PatientLogout\"); \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{patientfileID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PatientLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check the response body message",
									"pm.test(\"Response body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logout successful\");",
									"});",
									"",
									"// Verify the session or token is invalidated",
									"var token = pm.environment.get(\"Token\");",
									"pm.sendRequest({",
									"    url: \"https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient\",",
									"    method: \"GET\",",
									"    header: {",
									"        \"Authorization\": \"Bearer \" + token",
									"    }",
									"}, function (err, res) {",
									"    pm.test(\"Token is invalidated\", function () {",
									"        pm.expect(res).to.have.status(401);",
									"    });",
									"});",
									"",
									"// Validate response headers",
									"pm.test(\"Headers are correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"pm.test(\"Response status code matches expected status code\", function () {",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));",
									"    console.log(pm.response.code);",
									"    console.log(pm.variables.get(\"statusCode\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"response": [
						{
							"name": "AdminLogout",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"logoutdietician"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 03:14:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Logout successful"
						}
					]
				}
			]
		},
		{
			"name": "DeleteModule",
			"item": [
				{
					"name": "DieticianLogin_End",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responsebody = pm.response.json();",
									"const Token = responsebody.token;",
									"pm.environment.set(\"Token\",Token);",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"",
									"",
									"const schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"password\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userLoginEmail\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"email\"",
									"    }",
									"  },",
									"  \"required\": [\"password\", \"userLoginEmail\"]",
									"};",
									"",
									"",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"",
									"const validate = ajv.compile(schema);",
									"const valid = validate(requestBody);",
									"",
									"pm.test(\"Request body schema is valid\", function () {",
									"    pm.expect(valid).to.be.true;",
									"    if (!valid) {",
									"        console.log(validate.errors);",
									"    }",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Successful Login Credential Verification of Dietician\", function () {",
									"    pm.expect(responsebody.loginUserEmail).to.eql(pm.collectionVariables.get(\"dieticianEmail\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\t\"password\": \"{{dieticianPassword}}\",\n  \t\t\t\"userLoginEmail\": \"{{dieticianEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "DieticianLogin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"Culture22\",\n  \"userLoginEmail\": \"testuser1@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=niFZYQ1EJSFYWdOqZSYg5PGIy66A%2B%2F8%2FaNW4A2DtNqs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=niFZYQ1EJSFYWdOqZSYg5PGIy66A%2B%2F8%2FaNW4A2DtNqs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:51:26 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0dXNlcjFAZ21haWwuY29tIiwiaWF0IjoxNzIyNDAxNDg2LCJleHAiOjE3MjI0MzAyODZ9.dvdGxff-A-hZzDwrExhMrTIGKtaWajC9aUkBVZXWE_6HFOxYoPyweYRucL2xNc_0jsYHbvFFGJ2q7lse4nzzHQ\",\n    \"type\": \"Bearer \",\n    \"userId\": 7069,\n    \"loginUserEmail\": \"testuser1@gmail.com\",\n    \"roles\": [\n        \"ROLE_DIETICIAN\"\n    ]\n}"
						}
					]
				},
				{
					"name": "EndDeletePatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let PatientIdEndToEnd = pm.collectionVariables.get(\"PatientIdEndToEnd\");\r",
									"pm.test(\"Response status code matches expected status code\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"    console.log(pm.response.code);\r",
									"    console.log(pm.variables.get(\"statusCode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"PatientIdEndToEnd\",null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Patient-Endpoint}}/:patientId",
							"host": [
								"{{BaseURL}}{{Patient-Endpoint}}"
							],
							"path": [
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{PatientIdEndToEnd}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AdminLogin_End",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responsebody = pm.response.json();",
									"const Token = responsebody.token;",
									"pm.environment.set(\"Token\",Token);",
									"",
									"//Content Type validation",
									"pm.test(\"Content-Type header is present\", () => {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									"//Test for a response header having a particular value:",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "AdminLogin",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"test\",\n  \"userLoginEmail\": \"Team3@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722401329&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s6tiNxLTlYSfm4BTdhEToPNYoiTd3CMPygTuR3H4oYw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722401329&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=s6tiNxLTlYSfm4BTdhEToPNYoiTd3CMPygTuR3H4oYw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 04:48:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtM0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0MDEzMzAsImV4cCI6MTcyMjQzMDEzMH0.6N8cGLCQYysqdrbWtAosVrjdIlO0ALr-f7sE7FmWGsgo-bZ_6XK2FgT_VhKh8PucZmUMe5w4Lb2Pkh2105jj1g\",\n    \"type\": \"Bearer \",\n    \"userId\": 7045,\n    \"loginUserEmail\": \"Team3@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\"\n    ]\n}"
						}
					]
				},
				{
					"name": "DeleteDietician_End",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Dietician-Endpoint}}/:dieticianId",
							"host": [
								"{{BaseURL}}{{Dietician-Endpoint}}"
							],
							"path": [
								":dieticianId"
							],
							"variable": [
								{
									"key": "dieticianId",
									"value": "{{DieticianID_EndtoEnd}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AdminLogout_End",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"response": [
						{
							"name": "AdminLogout",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"logoutdietician"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722395687&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7I77qYDp6AIQLUF7xrxfTmNc50ECCMiNocVHEwz2TVw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "text/plain;charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "17"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 03:14:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "Logout successful"
						}
					]
				}
			]
		},
		{
			"name": "PDF Parsing",
			"item": [
				{
					"name": "Multipart Parse PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed JSONError by adding proper error handling\r",
									"pm.test(\"Check for valid response\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html\");\r",
									"    pm.expect(pm.response.text()).to.include(\"TypeError: Cannot read properties of undefined\");\r",
									"});\r",
									"pm.environment.set(\"parsedPdfText\", pm.response.json().pdfText);\r",
									"let parsedPdfText = pm.environment.get(\"parsedPdfText\");\r",
									"console.log(parsedPdfText)\r",
									"// Test to check if the response contains a valid error message\r",
									"pm.test(\"Valid error message is present in the response body\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"TypeError: Cannot read properties of undefined\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef54ae2-fbd9-4110-b5bb-688c4fdadbfb"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/multipart-parse",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"multipart-parse"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Load data from json file to collection variable 'requestData'\r",
					"if (typeof pm.variables.get('requestData') !== 'object') {\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"// Read input data from collection variable 'requestData'\r",
					"const requestData = pm.variables.get('requestData');\r",
					"console.log('requestData', requestData);\r",
					"\r",
					"// If 'requestData'/input data is empty\r",
					"if (typeof requestData !== 'object' || Object.keys(requestData).length === 0) {\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find current request's data\r",
					"const currentRequest = requestData.requests.find(({ name }) => name === pm.info.requestName);\r",
					"\r",
					"// If no data found for current request\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// If data found for current request\r",
					"if (currentRequest && currentRequest.data && currentRequest.data.length > 0) {\r",
					"    const variables = currentRequest.data.shift();\r",
					"    if (variables) {\r",
					"        Object.entries(variables).forEach(([key, value]) => {\r",
					"            pm.variables.set(key, value);\r",
					"        });\r",
					"        pm.variables.set('requestData', requestData);\r",
					"\r",
					"        if (pm.info.requestName === 'CreatePatient' || pm.info.requestName === 'UpdatePatient') {\r",
					"            pm.collectionVariables.set(\"requestData\", JSON.stringify(requestData));\r",
					"            pm.collectionVariables.set(\"description\", variables.description || \"\");\r",
					"\r",
					"            var patientInfo = PatientInfo(variables);\r",
					"\r",
					"            pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));\r",
					"            handleFormData(patientInfo, variables.file);\r",
					"\r",
					"        } else if (pm.info.requestName === 'AddNewReportswithorwithoutVitals') {\r",
					"            pm.collectionVariables.set(\"requestData\", JSON.stringify(requestData));\r",
					"            pm.collectionVariables.set(\"description\", variables.description || \"\");\r",
					"\r",
					"            var patientInfo = PatientInfo(variables);\r",
					"\r",
					"            pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));\r",
					"            let vitalsData = {\r",
					"                \"Weight\": variables.P_Weight || 0.0,\r",
					"                \"Height\": variables.P_Height || 0.0,\r",
					"                \"Temperature\": variables.P_Temperature || 0.0,\r",
					"                \"SP\": variables.P_SP || 0,\r",
					"                \"DP\": variables.P_DP || 0\r",
					"            };\r",
					"            \r",
					"            let formData = handleFormData(patientInfo, variables.file);\r",
					"            if (!formData) {\r",
					"                console.log(\"i am here\");\r",
					"                formData = [];\r",
					"            }\r",
					"            formData.push({\r",
					"                key: 'vitals',\r",
					"                value: JSON.stringify(vitalsData),\r",
					"                type: 'text'\r",
					"            });\r",
					"        } else {\r",
					"            pm.request.headers.add({\r",
					"                key: 'Content-Type',\r",
					"                value: 'application/json'\r",
					"            });\r",
					"        }\r",
					"\r",
					"        if (currentRequest.data.length > 0) {\r",
					"            pm.execution.setNextRequest(pm.info.requestName);\r",
					"        }\r",
					"    } else {\r",
					"        console.error('No variables found for this request.');\r",
					"    }\r",
					"}\r",
					"\r",
					"function PatientInfo(variables) {\r",
					"    return {\r",
					"        FirstName: variables.P_firstName,\r",
					"        LastName: variables.P_lastName,\r",
					"        ContactNumber: variables.P_ContactNumber,\r",
					"        Email: variables.P_Email,\r",
					"        Allergy: variables.P_Allergy,\r",
					"        FoodPreference: variables.P_FoodPreferences,\r",
					"        CuisineCategory: variables.P_CuisineCat,\r",
					"        DateOfBirth: variables.P_DOB\r",
					"    };\r",
					"}\r",
					"\r",
					"function handleFormData(patientInfo, files) {\r",
					"    let formData = [];\r",
					"\r",
					"    formData.push({\r",
					"        key: 'patientInfo',\r",
					"        value: JSON.stringify(patientInfo),\r",
					"        type: 'text'\r",
					"    });\r",
					"\r",
					"    if (files && files.length > 0) {\r",
					"        files.forEach(file => {\r",
					"            formData.push({\r",
					"                key: 'file',\r",
					"                src: file,\r",
					"                //type: 'file'\r",
					"            });\r",
					"        });\r",
					"    }\r",
					"    pm.request.headers.upsert({\r",
					"    key: 'Content-Type',\r",
					"    value: 'multipart/form-data'\r",
					"});\r",
					"    return formData;\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "fileID",
			"value": ""
		},
		{
			"key": "patientId",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "currentIndex",
			"value": ""
		},
		{
			"key": "P_firstName",
			"value": ""
		},
		{
			"key": "P_lastName",
			"value": ""
		},
		{
			"key": "P_ContactNumber",
			"value": ""
		},
		{
			"key": "P_Email",
			"value": ""
		},
		{
			"key": "P_Allergy",
			"value": ""
		},
		{
			"key": "P_FoodPreferences",
			"value": ""
		},
		{
			"key": "P_CuisineCat",
			"value": ""
		},
		{
			"key": "P_DOB",
			"value": ""
		},
		{
			"key": "Reports-Endpoint",
			"value": "/patient/newReports/"
		},
		{
			"key": "P_Weight",
			"value": ""
		},
		{
			"key": "P_Height",
			"value": ""
		},
		{
			"key": "P_Temperature",
			"value": ""
		},
		{
			"key": "P_SP",
			"value": ""
		},
		{
			"key": "P_DP",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "currentFileIndex",
			"value": ""
		},
		{
			"key": "fileIds",
			"value": ""
		},
		{
			"key": "currentFileId",
			"value": ""
		},
		{
			"key": "patientFilesMap",
			"value": ""
		},
		{
			"key": "morbidityTestNames",
			"value": ""
		},
		{
			"key": "patientIdsList",
			"value": ""
		},
		{
			"key": "morbidityIndex",
			"value": ""
		},
		{
			"key": "morbiditytestname",
			"value": ""
		},
		{
			"key": "patientEmail",
			"value": ""
		},
		{
			"key": "PatientIdEndToEnd",
			"value": ""
		},
		{
			"key": "fileId",
			"value": ""
		},
		{
			"key": "Get all Morbidities_Patient",
			"value": ""
		},
		{
			"key": "endFileID",
			"value": ""
		},
		{
			"key": "endFileIDs",
			"value": ""
		},
		{
			"key": "patientfileID",
			"value": ""
		},
		{
			"key": "patientFileIndex",
			"value": ""
		},
		{
			"key": "DieticianID_EndtoEnd",
			"value": ""
		},
		{
			"key": "dieticianID",
			"value": ""
		},
		{
			"key": "dieticianEmail",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": ""
		},
		{
			"key": "requestData",
			"value": ""
		},
		{
			"key": "patientInfo",
			"value": ""
		}
	]
}